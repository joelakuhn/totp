<?php

class Base32 {
  const DECODE_ALPHABET = [
    0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff,
    0x00, 0xff, 0xff, 0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
    0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  ];

  const ENCODE_APHABET = [
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
    'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
    'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
    'Y', 'Z', '2', '3', '4', '5', '6', '7',
  ];

  public static function decode($str, $alphabet = self::DECODE_ALPHABET) {
    $result = '';
    $byte = 0;
    $offset = 0;
    foreach (str_split($str) as $c) {
      $val = $alphabet[ord($c)];

      $shift = (8 - $offset) - 5;
      if ($shift < 0) $byte |= $val >> abs($shift);
      else $byte |= $val << $shift;

      $offset += 5;
      if ($offset >= 8) {
        $result .= chr($byte);
        $offset -= 8;
        $byte = $val << (8 - $offset) & 0xff;
      }
    }
    return $result;
  }

  public static function encode($str, $alphabet = self::ENCODE_APHABET) {
    $result = '';
    $working = 0;
    $working_n = 0;
    $count = 0;
    foreach (str_split($str) as $c) {
      $working = ($working << 8) + ord($c);
      $working_n += 8;
      while ($working_n >= 5) {
        $result .= $alphabet[$working >> ($working_n - 5)];
        $working_n -= 5;
        $working &= 0xFF >> (8 - $working_n);
        $count += 1;
      }
    }
    if ($working !== 0) {
      $result .= $alphabet[$working << (5 - $working_n)];
      $count += 1;
      if ($count % 8 !== 0) {
        for ($i=0; $i<(8 - ($count % 8)); $i++) {
          $result .= '=';
        }
      }
    }
    return $result;
  }
}

function otp($secret, $len = 6, $period = 30) {
  $decoded_secret = Base32::decode($secret);
  if ($decoded_secret === null) return null;

  $counter = floor(time() / $period);
  $digest = hash_hmac('sha1', pack('J', $counter), $decoded_secret, true);
  $offset = unpack("C", substr($digest, 19, 1))[1] & 0x0F;
  $hotp = unpack("N", substr($digest, $offset, 4))[1] & 0x7FFFFFFF;

  return str_pad(substr($hotp, -$len, $len), $len, '0', STR_PAD_LEFT);
}

echo Base32::decode(Base32::encode('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567')) . "\n";
echo otp('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567') . "\n";
